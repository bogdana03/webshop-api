#
# An Elasticbeanstalk environment must contain three combined resources at a minimum:
#
# AWS::ElasticBeanstalk::Application
# This basically only contains a name for the application
#
# AWS::ElasticBeanstalk::ApplicationVersion
# This resource combines the application, with a reference to an executable deployment package which must reside in S3
# This resource effectively defines an executable version of the application
#
# AWS::ElasticBeanstalk::Environment
# This resource defines the runtime environment your ApplicationVersion should use.
# Here, we define things like how many servers we want, size of the server, JDK version to use and so on.
#
# PROTIP: To see documentation of a specific resource, google that resource. For instance google AWS::ElasticBeanstalk::Environment
# And view AWS official documentation on the first result.
# In these documentations, there are usually examples of how to define that particular resource in the bottom.
# These examples usually provides great value.
#
#
# Also, remember documentation about CFN functions which can be found here:
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html
Parameters:
  GroupName:
    Type: String
    Default: bogdanas
    Description: Cloudformation parameters can be used to create different stacks and resources by using the same template,
      or just simply for easily changed parameters
Resources:
  BackendApplication: # Logical ID of a resource. This is the ID used when referring to other resources in same template
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName:
        Fn::Join:  # This will tell CFN to join together a list of elements with a - as delimiter. Result will be like josefw-BackendApplication
          - '-'
          - - !Ref GroupName # The !Ref function returns the value of a specified parameter or resource. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html
            - 'BackendApplication'
  BackendApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:


      ApplicationName:
        Ref: bogdanas-BackendApplication
      Description: Version of application
      SourceBoundel:
        S3Bucket: !Sub "bogdanas-storage"
        S3Key: webshop-api-1.0.0-SNAPSHOT.jar

  BackendAppEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref  BackendApplication
      VersionLabel:
        Ref: BackendApplicationVersion
        EnvironmentName: !Sub bogdanas-BackendAppEnvironment
        SolutionStackName: 64bit Amazon Linux 2 v3.2.8 running Corretto 11 # TODO: We need to define kind of a "runtime environment" that should be used.


      OptionSettings:
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: ha-elasticbeanstalk-ec2-role

        - Namespace: aws:ec2:instances
          OptionName: InstancesTypes
          Value: t3.nano

        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnviormentType
          Value: SingleInstance

        - NameSpace: aws:autoscaling:lounchconfiguration
          OptionName: SecurityGroups
          Value: !Ref SecurityGroup

      SecirityGroup:
        Type: AWS::EC2::SecirityGroup
        Properties:
          GroupDescription: Limiting network access to application
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 128.0.0.0/1

      DNSRecord:
      Type: AWS::RouteS3::RecordSet
      Proprieties:
        HostedZoneId: Z0413857YT73ADA8FRFF
        Name: bogdanas-api.cloud-ha.com
        ResourceRecords:
         - !GetAtt B.atributeName
        TTL: 300
        Type: A

